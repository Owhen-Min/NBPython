'''
생각 1. 위에서 부터 내려오는 방법
    1) 재귀로 구현
    2) 각 행의 0번쨰 인덱스를 다 더한값을 초기 result 로 두고, 완전탐색을 이어간다.
    (시간초과 방지를 위해 현재 저장되어있는 result 보다 커질 시 바로 다음 경우의 result 를 구한다) => min 이라고 착각하고 잘못 구상 함

생각2. 아래에서 부터 올라가는 방법
    아래에서부터 위로 올라갈건데, 자신의 빝에 수중 큰 녀석을 데리고 올라간다. 이게 무슨 말이냐면
    1
    2 3
    4 5 6
    7 8 9 10
    다음과 같은 삼각형이 있을때, 4를 기준으로 7 과 8 중에 더큰 녀석 8을 4에 더한다. 5와 6도 마찬가지로 계산하면

    1
    2 3
    12 14 16
    다음과 같은 삼각형으로 바뀌고, 위와 같은 과정을 반복하면 가장 위에있는 1에서 최대값을 구할 수 있게 된다.
'''
# 생각2 에 대한 코드 구현
def solution(triangle):
    for i in range(len(triangle) - 2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])

    return triangle[0][0]